import os
import telebot
import gspread
from datetime import datetime, date
from oauth2client.service_account import ServiceAccountCredentials

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
GOOGLE_SHEET_NAME = os.environ.get('GOOGLE_SHEET_NAME')
GOOGLE_CREDS = os.environ.get('GOOGLE_CREDS_JSON')  # Railway secret ‚Äî JSON —Å—Ç—Ä–æ–∫–∞


bot = telebot.TeleBot(TELEGRAM_TOKEN)

# Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
SHEET_ID = os.environ.get('GOOGLE_SHEET_ID')
sheet = client.open_by_key(SHEET_ID).sheet1


user_state = {}
TEMP_DATA = {}

COLUMN_MAP = {
    'date': 4,
    'type': 5,
    'training': 6,
    'volume': 7,
    'goal': 8
}

def find_row_by_date(search_date):
    rows = sheet.get_all_values()
    for i, row in enumerate(rows[1:], start=2):
        try:
            row_date = datetime.strptime(row[3], "%d.%m.%Y").date()
            if row_date == search_date:
                return i, row
        except:
            continue
    return None, None

@bot.message_handler(commands=['start'])
def start_message(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", "–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    user_state[message.chat.id] = "choose_action"

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id) == "choose_action")
def choose_action(message):
    if message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
        user_state[message.chat.id] = "view_date"
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–°–µ–≥–æ–¥–Ω—è':")
        user_state[message.chat.id] = "edit_date"

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id) == "view_date")
def view_training(message):
    try:
        input_date = datetime.strptime(message.text, "%Y-%m-%d").date()
        row_num, row = find_row_by_date(input_date)
        if row:
            response = (
                f"–î–∞—Ç–∞: {row[3]}\n"
                f"–¢–∏–ø –Ω–∞–≥—Ä—É–∑–∫–∏: {row[4]}\n"
                f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {row[5]}\n"
                f"–û–±—ä–µ–º: {row[6]}\n"
                f"–¶–µ–ª—å: {row[7]}"
            
)
        else:
            response = "–í –¥–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ."
        bot.send_message(message.chat.id, response)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
    user_state[message.chat.id] = "choose_action"

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id) == "edit_date")
def edit_date(message):
    try:
        if message.text.lower() == "—Å–µ–≥–æ–¥–Ω—è":
            input_date = date.today()
        else:
            input_date = datetime.strptime(message.text, "%Y-%m-%d").date()

        row_num, row = find_row_by_date(input_date)
        if not row:
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç—É –¥–∞—Ç—É. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ–∫–∞ –Ω–µ–ª—å–∑—è.")
            return

        TEMP_DATA[message.chat.id] = {'row_num': row_num, 'date': input_date}
        user_state[message.chat.id] = "edit_training"
        bot.send_message(message.chat.id, f"–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {row[5]}")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id) == "edit_training")
def edit_training(message):
    if message.text.lower() != "–Ω–µ –º–µ–Ω—è—Ç—å":
        sheet.update_cell(TEMP_DATA[message.chat.id]['row_num'], COLUMN_MAP['training'], message.text)
    bot.send_message(message.chat.id, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ '–û–±—ä–µ–º', —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: (–æ—Å—Ç–∞–≤—å—Ç–µ '–ù–µ –º–µ–Ω—è—Ç—å' –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –º–µ–Ω—è—Ç—å)")
    user_state[message.chat.id] = "edit_volume"

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id) == "edit_volume")
def edit_volume(message):
    if message.text.lower() != "–Ω–µ –º–µ–Ω—è—Ç—å":
        sheet.update_cell(TEMP_DATA[message.chat.id]['row_num'], COLUMN_MAP['volume'], message.text)
    bot.send_message(message.chat.id, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ '–¶–µ–ª—å', —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: (–æ—Å—Ç–∞–≤—å—Ç–µ '–ù–µ –º–µ–Ω—è—Ç—å' –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –º–µ–Ω—è—Ç—å)")
    user_state[message.chat.id] = "edit_goal"

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id) == "edit_goal")
def edit_goal(message):
    if message.text.lower() != "–Ω–µ –º–µ–Ω—è—Ç—å":
        sheet.update_cell(TEMP_DATA[message.chat.id]['row_num'], COLUMN_MAP['goal'], message.text)
    bot.send_message(message.chat.id, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    user_state[message.chat.id] = "choose_action"

bot.polling()

